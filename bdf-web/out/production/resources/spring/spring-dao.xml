<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

    <bean id="lobHandler" class="org.springframework.jdbc.support.lob.DefaultLobHandler" lazy-init="true" />

    <!-- 数据源配置 ================ 开始 ==================== -->
    <bean id="dataSource_instances" class="com.atomikos.jdbc.AtomikosDataSourceBean"
          init-method="init" destroy-method="close">
        <property name="uniqueResourceName" value="oracle/ds_inst" />
        <property name="xaDataSourceClassName" value="${ds_inst.driver}" />
        <property name="xaProperties">
            <props>
                <prop key="URL">${ds_inst.url}</prop>
                <prop key="user">${ds_inst.user}</prop>
                <prop key="password">${ds_inst.pwd}</prop>
            </props>
        </property>
        <property name="poolSize" value="${pool.size}" />
        <property name="maxPoolSize" value="${pool.max}" />
    </bean>
    <!-- 数据源配置 ================ 结束 ==================== -->

    <!-- SessionFactory配置 ================ 开始 ==================== -->
    <bean id="sessionFactory_instances"
          class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource_instances" />
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">com.dist.bdf.base.data.impl.OracleDialect</prop>
                <prop key="hibernate.connection.SetBigStringTryClob">true</prop>
                <prop key="hibernate.show_sql">true</prop>
                <prop key="hibernate.hbm2ddl.auto">update</prop>
                <prop key="hibernate.default_schema">${ds_inst.user}</prop>
                <prop key="format_sql">false</prop>
                <prop key="hibernate.cache.use_second_level_cache">true</prop>
            </props>
        </property>
        <property name="packagesToScan">
            <list>
                <value>com.dist.training.*.entity.instance</value>
            </list>
        </property>
        <property name="mappingJarLocations">
            <list>
                <!-- <value>/WEB-INF/lib/com.dist*.jar</value> -->
            </list>
        </property>
        <property name="mappingLocations">
            <list>
                <!--<value>classpath*:/com/dist/query/instance/mapping/*.hbm.xml</value>-->
            </list>
        </property>
    </bean>
    <!-- SessionFactory配置 ================ 结束 ==================== -->

    <!-- 多个数据库管理器配置 ================ 开始 ==================== -->
    <bean id="sessionFactoryManager" class="com.dist.bdf.base.data.impl.SessionFactoryManagerImpl">
        <property name="sessionFactoryMap">
            <map>
                <!-- 需要将上面配置的每一个SessionFactory注入进来，KEY需要和包名匹配 -->
                <entry key="instances" value-ref="sessionFactory_instances" />
            </map>
        </property>
    </bean>
    <bean id="baseDao" class="com.dist.bdf.base.data.impl.HibernateBaseDao">
        <property name="sessionFactoryManager" ref="sessionFactoryManager" />
    </bean>
    <!-- 多个数据库管理器配置 ================ 结束 ==================== -->

    <!-- 分布式数据库事务管理 ================ 开始 ==================== -->
    <bean id="atomikosTransactionManager" class="com.atomikos.icatch.jta.UserTransactionManager"
          init-method="init" destroy-method="close">
        <property name="forceShutdown" value="true" />
    </bean>
    <bean id="atomikosUserTransaction" class="com.atomikos.icatch.jta.UserTransactionImp">
        <property name="transactionTimeout">
            <value>300</value>
        </property>
    </bean>
    <bean id="txManager"
          class="org.springframework.transaction.jta.JtaTransactionManager">
        <property name="transactionManager" ref="atomikosTransactionManager" />
        <property name="userTransaction" ref="atomikosUserTransaction" />
        <property name="globalRollbackOnParticipationFailure" value="false" />
    </bean>
    <tx:annotation-driven transaction-manager="txManager" />
    <tx:advice id="advice" transaction-manager="txManager">
        <tx:attributes>
            <tx:method name="save*" propagation="REQUIRED" />
            <tx:method name="delete*" propagation="REQUIRED" />
            <tx:method name="update*" propagation="REQUIRED" />
            <tx:method name="query*" propagation="REQUIRED" />
            <tx:method name="get*" propagation="REQUIRED" />
            <tx:method name="count*" propagation="REQUIRED" />
            <tx:method name="export*" propagation="REQUIRED" />
            <tx:method name="copy*" propagation="REQUIRED" />
            <tx:method name="project*" propagation="REQUIRED" />
            <tx:method name="jump*" propagation="REQUIRED" />
            <tx:method name="reuse*" propagation="REQUIRED" />
            <tx:method name="list*" propagation="REQUIRED" />
            <tx:method name="load*" propagation="REQUIRED" />
            <tx:method name="create*" propagation="REQUIRED"/>
            <tx:method name="check*" propagation="REQUIRED" />
            <tx:method name="sign*" propagation="REQUIRED" />
            <tx:method name="upload*" propagation="REQUIRED" />
            <tx:method name="download*" propagation="REQUIRED" />
            <tx:method name="rebuild*" propagation="REQUIRED" />
            <tx:method name="add*" propagation="REQUIRED" />
            <tx:method name="start*" propagation="REQUIRED"/>

            <tx:method name="submit*" propagation="REQUIRED" />
            <tx:method name="relation*" propagation="REQUIRED" />
            <tx:method name="search*" propagation="REQUIRED" />

        </tx:attributes>
    </tx:advice>
    <aop:config>
        <aop:pointcut id="point" expression="
		execution(* com.dist.*.*.service.*.*(..))||
		execution(* com.dist.*.*.pubService.*.*(..))||
		execution(* com.dist.*.*.service.imp.*.*(..))||
		execution(* com.dist.*.service.*Service.*(..))||
		execution(* com.dist.*.service..*Service.*(..))||
		execution(* com.dist.*.*.pubService.*.*(..))||
		execution(* com.dist.*.*.pubService.imp.*.*(..))||
		execution(* com.dist.*.pubService.*Service.*(..))||
		execution(* com.dist.*.pubService..*Service.*(..)) " />

        <aop:advisor advice-ref="advice" pointcut-ref="point" />
    </aop:config>
    <aop:aspectj-autoproxy proxy-target-class="true"></aop:aspectj-autoproxy>
    <!-- 分布式数据库事务管理 ================ 结束 ==================== -->
</beans>
